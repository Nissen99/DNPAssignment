@page "/AddAdult"
@page "/AddAdult/{FamilyStreetName}/{FamilyHouseNumber}"
@using Entity.Models;
@using SimpleLogin.BuisnessModels
@using SimpleLogin.BuisnessModels.FamilyConnectionModels
@using SimpleLogin.BuisnessModels.FamilyModel

@attribute [Authorize(Policy = "MustBeAdmin")]
@inject IModalService ModalService
@inject IAdultModel AdultModel
@inject IFamilyModel FamilyModel
@inject IFamilyAdultModel FamilyAdultModel
@inject NavigationManager NavigationManager 

<h3>Add adult</h3>

<EditForm Model="@adult" OnValidSubmit="@AddNewAdult">
    <DataAnnotationsValidator/>
    <ValidationSummary/>

    <div class="form-group"> First Name:<br/> 
        <InputText @bind-Value="adult.FirstName" required/>
    </div>
    <div class="form-group"> Last Name:<br/> 
        <InputText @bind-Value="adult.LastName" required/>
    </div>
    <div class="form-group"> Hair color:<br/> 
        <InputText @bind-Value="adult.HairColor" required/>
    </div>
    <div class="form-group"> Eye color:<br/> 
        <InputText @bind-Value="adult.EyeColor" required/>
    </div>
    <div class="form-group"> Age:<br/> 
        <InputNumber @bind-Value="adult.Age" required/>
    </div>
    <div class="form-group"> Weight:<br/> 
        <InputNumber @bind-Value="adult.Weight" required/>
    </div>
    <div class="form-group"> Height:<br/> 
        <InputNumber @bind-Value="adult.Height" required/>
    </div>
    <div class="form-group"> Sex:<br/> 
        <InputText @bind-Value="adult.Sex" required/>
    </div>
    <div class="form-group"> Job title:<br/> 
        <InputText @bind-Value="jobTitle"/>
    </div>
    <div class="form-group"> Salary:<br/> 
        <InputNumber defalut="null" @bind-Value="salary"/>
    </div>

    
    <p class="actions">
        <button class="btn btn-outline-dark" type="submit">Create</button>
    </p>
</EditForm>



@code {

    private Adult adult = new Adult();

    private string jobTitle;
    private int? salary;
    
    [Parameter]
    public string FamilyHouseNumber { get; set; }

    [Parameter]
    public string FamilyStreetName { get; set; }

    private Family Family;

    
    /*
     * Ved ikke hvorfor den her kør selv hvis parameter ikke sat, men fix med try catch 
     */
    protected override async void OnParametersSet()
    {
        try
        {
            Family = await FamilyModel.GetFamilyAsync(FamilyStreetName, int.Parse(FamilyHouseNumber));

        }
        catch (ArgumentNullException e)
        {
            Console.WriteLine("Family Not Sat");
            Family = null;
        }
    }
   

    /*
     * Laver adult i Filen om det går galt eller ej burde nok tjekke hvornår det gik galt og ryde op
     */
    private async Task AddNewAdult()
    {
        try
        {
            if (jobTitle!= null || salary != null)
            {
                adult.Job = new Job() {JobTitle = jobTitle, Salary = salary};
            }
            
            if (Family != null)
            {
                Adult createdWithId = await AdultModel.AddAdultAsync(adult);
                await FamilyAdultModel.AddAdultToFamilyAsync(createdWithId, Family);
                NavigationManager.NavigateTo("/Families");
               return;
            }
            
            await AdultModel.AddAdultAsync(adult);
            NavigationManager.NavigateTo("/Adults");
        }
        catch (Exception e)
        {
         //Could delete the new Adult here, if we make it far enough to have created it, but then an error occurs
            ModalService.Show<ErrorPage>(e.Message);
        }
     


    }
    



}